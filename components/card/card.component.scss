@import "../../styles/variables";
@import "variables";

@mixin content{
  overflow-y: auto;
  @include iosScrolling();
  background-color: #fff;
}

// Maximize both horizontally and vertically.
//
// As soon as the screenwidth falls below a threshold, we maximize dialogs in both directions in
// order to maintain a consistent look, i.e., the dialog should not go edge-to-edge horizontally but
// have borders vertically.
@mixin maximize {
  padding: 0px;
  // When we show the mobile (bottom) nav bar, we can draw over the top bar since all important
  // functions are accessible via the bottom bar.
  @media screen and (max-width: $mobileTabSwitchWidth) {
    top: 0px;
  }
  .mat-card {
    height: 100%;
    width: 100%;
  }
}

// Draw over everything and darken the background if visible.
//
// This will make the user unable to navigate the application.
//
// This mode can be enforced by setting the `modal` input to `always` to direct user focus to the
// dialog. It is also triggered automatically in case the viewport's height becomes to small to
// comfortably fit the dialog.
@mixin modal {
  @include darken();
  @include blurBackground();
  @include setZIndex($dialogZIndex);
  height: 100%;
}

@mixin no-modal {
  padding: #{$nonModalPadding};
  top: #{$mainnavHeight};
  height: unset;
  @media screen and (max-width: $mobileTabSwitchWidth){
    bottom: #{$mobileTabNavHeight};
  }
  @include setZIndex($dialogNonModalZIndex)
}

@mixin setZIndex($baseZIndex) {
  @each $p in 0, 1, 2, 3, 4, 5 {
    &[priority="#{$p}"] {
      z-index: $baseZIndex + $p;
    }
  }
}

:host ::ng-deep .card-dialog{
  top: 0px;
  bottom: 0px;
  display: flex;
  align-items: center;
  justify-content: center;
  &[modal=always] {
    @include modal();
  }
  @media (max-height: $mobileHeightWithKeyboard) {
    @include modal();
  }
  @media (min-height: $mobileHeightWithKeyboard) {
    &:not([modal=always]) {
      @include no-modal();
    }
  }
  @each $name, $value in $heights {
    &[height=#{$name}] {
      .mat-card {
        height: $value;
      }
    }
  }
  @each $name, $value in $widths {
    &[width=#{$name}] {
      .mat-card {
        width: $value;
      }
      @media (max-width: $value + 2*$nonModalPadding) {
        @include maximize();
      }
    }
  }
  .mat-card {
    display: flex;
    flex-direction: column;
    max-width: 100%;
    max-height: 100%;
    position: relative;
    padding: 0;
    @include materialShadowLarge();
    .mat-card-header {
      flex-shrink: 0;
      background-color: $actionDialogBackground;
      display: flex;
      align-items: center;
      height: $titleHeight;
      padding-top: 15px;
      position: relative;
      .mat-card-header-text {
        width: calc(100% - 32px);
      }
      .cancel {
        position: absolute;
        right: 0;
        top: 0;
        padding:2px;
        background: linear-gradient(to right,rgba(red($actionDialogBackground),green($actionDialogBackground),blue($actionDialogBackground),0.0001) 0,$actionDialogBackground 15px);
        >button {
          border-radius: 50%;
          height: 66px;
        }
      }
      .avatar {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 20px;
        margin-top: -10px;
        background-color: #fff;
        > img {
          width: 24px;
          height: 24px;
        }
        >  i {
          color: $textLight;
        }
      }
      .mat-card-title, .mat-card-subtitle{
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
      .mat-card-title{
        color: $textMain;
      }
    }
    background-color: $backgroundColor;
    border-radius: 2px;
    mat-card-actions {
      background-color: #fff;
      border-top:1px solid $cardSeperatorLineColor;
      display: flex;
      height: $actionMenuHeight;
      justify-content: flex-end;
      margin: 0;
      padding: 17px 20px;
      button {
        margin: 0 5px;
        padding: 0 2rem;
        font-weight: 600;
      }
    }
    mat-card-content {
      margin: 0;
      position: relative;
      flex-grow: 1;
    }
    &:not(.card-tabbed) mat-card-content {
      @include content();
    }
    &.card-tabbed .mat-tab-body-wrapper {
      @include content();
    }
    .card-content-padding {
      padding: $cardPadding;
    }
  }
  .card-jumpmarks {
    margin-left: $jumpmarksWidth;
    .jumpmarks {
      position: absolute;
      z-index: $dialogZIndex+2;
      top: 0;
      left: -$jumpmarksWidth - 5px;
      width: $jumpmarksWidth;
      background-color: $workspaceTreeBackground;
      border-radius: 3pt;
      padding: 10px 0;
      button {
        border-radius: 0;
        margin: 0;
        padding: 5px;
        width: 100%;
        transition: all $transitionNormal;
        .mat-button-wrapper{
          justify-content: flex-start;
        }
      }
      button.active {
        background: $workspaceTreeSelectedBackgroundEffect;
        background-color: $workspaceTreeSelectedBackground;
      }
    }
  }

  @media screen and (max-width: ($mobileWidth - $mobileStage*3)) {
    mat-card-actions > div{
      // when screen is small, all buttons should have the same size to prevent long texts to let short text to be too small
      width: 0;
      margin: 0;
      flex-grow: 1;
      justify-content: center;
      >button{
        width: calc(100% - 5px*2); // subtract the margin
      }
    }
  }
  @media all and (max-width: 50 + 700 + $jumpmarksWidth){
    .card-jumpmarks{
      margin-left: 0;
      .jumpmarks{
        display: none;
      }
    }
  }
}
